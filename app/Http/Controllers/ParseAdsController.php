<?php
 
namespace App\Http\Controllers;
use App\Models\Ads;
use App\Http\Controllers\DBController;
use App\Http\Controllers\PostAdsController;

class ParseAdsController extends Controller
{
    public $course_patterns = [
        "sell_dollar"      => '/(–ü—Ä–æ–¥|–ø—Ä–æ–¥|–ü–†–û–î|[–±–æ]–º–µ–Ω[—è–∏])(.*)(\$|–î–æ–ª|–î–û–õ|–¥–æ–ª|–±–µ–ª[—ã–æ][–π–≥]|—Å–∏–Ω|–∑–µ–ª|üíµ)/', // —Å—Ç–∞—Ä–∞—è –º–∞—Å–∫–∞ [–ü–ø]—Ä–æ–¥.*(\$|–¥–æ–ª|—Å–∏–Ω|–∑–µ–ª|üíµ)(.*?\d{2})
        "sell_euro"        => '/(–ü—Ä–æ–¥|–ø—Ä–æ–¥|–ü–†–û–î|[–±–æ]–º–µ–Ω[—è–∏])(.*)(\‚Ç¨|–µ–≤—Ä–æ|–ï–≤—Ä–æ|–ï–í–†–û)/',
        "sell_hrn"         => '/(–ü—Ä–æ–¥|–ø—Ä–æ–¥|–ü–†–û–î|[–±–æ]–º–µ–Ω[—è–∏]|–ü–æ–ø–æ–ª–Ω|–ø–æ–ø–æ–ª–Ω)(.*)(–ì—Ä–∏–≤|–≥—Ä–∏–≤|–ì–†–ò–í|–ì—Ä–Ω|–ì–†–ù|–≥—Ä–Ω|\s–≥—Ä\s|\s–≥—Ä\.|—É–∫—Ä|–£–∫—Ä|–ü—Ä–∏–≤–∞—Ç|–ø—Ä–∏–≤–∞—Ç|–ü–†–ò–í–ê–¢|–û—â–∞–¥|–æ—â–∞–¥|–û–©–ê–î|–ú–æ–Ω–æ|–º–æ–Ω–æ)/',
        "sell_cashless"    => '/(–ü—Ä–æ–¥|–ø—Ä–æ–¥|–ü–†–û–î|[–±–æ]–º–µ–Ω[—è–∏]|–ü–æ–ø–æ–ª–Ω|–ø–æ–ø–æ–ª–Ω)(.*)(–°–±–µ—Ä|—Å–±–µ—Ä|–°–ë–ï–†|[–¢—Ç]–∏–Ω—å–∫–æ)/',
        
        "buy_dollar"       => '/(–ö—É–ø|–∫—É–ø|–ö–£–ü)(.*)(\$|–î–æ–ª|–î–û–õ|–¥–æ–ª|–±–µ–ª[—ã–æ][–π–≥]|—Å–∏–Ω|–∑–µ–ª|üíµ)/',
        "buy_euro"         => '/(–ö—É–ø|–∫—É–ø|–ö–£–ü)(.*)(\‚Ç¨|–µ–≤—Ä–æ|–ï–≤—Ä–æ|–ï–í–†–û)/',
        "buy_hrn"          => '/(–ö—É–ø|–∫—É–ø|–ö–£–ü|–û–±–Ω–∞–ª–∏—á|–æ–±–Ω–∞–ª–∏—á)(.*)(–ì—Ä–∏–≤|–≥—Ä–∏–≤|–ì–†–ò–í|–ì—Ä–Ω|–ì–†–ù|–≥—Ä–Ω|\s–≥—Ä\s|\s–≥—Ä\.|—É–∫—Ä|–£–∫—Ä|–ü—Ä–∏–≤–∞—Ç|–ø—Ä–∏–≤–∞—Ç|–ü–†–ò–í–ê–¢|–û—â–∞–¥|–æ—â–∞–¥|–û–©–ê–î|–ú–æ–Ω–æ|–º–æ–Ω–æ)/',
        "buy_cashless"     => '/(–ö—É–ø|–∫—É–ø|–ö–£–ü|–û–±–Ω–∞–ª–∏—á|–æ–±–Ω–∞–ª–∏—á)(.*)(–°–±–µ—Ä|—Å–±–µ—Ä|–°–ë–ï–†|[–¢—Ç]–∏–Ω—å–∫–æ)/'
    ];
    public $rate_patterns = [
        // –º–∞—Å–∫–∞ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç —Å–∏–º–≤–æ–ª—ã –¥–æ –∏ –ø–æ—Å–ª–µ –∫—É—Ä—Å–∞, —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –º—ã –Ω–µ –ø–æ–ø–∞–ª–∏ –Ω–∞ —á–∞—Å—Ç—å –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞, —Å—É–º–º—ã –∏–ª–∏ –¥—Ä—É–≥–∏—Ö —á–∏—Å–µ–ª
        "dollar"      => '/\D{2}[678](\d$|\d\D{2}|\d([\.\,]\d?)\d$|\d([\.\,]\d*)\D{2})|[678][0-9]([\.\,]\d{0,2})?-[678][0-9]([\.\,]\d{0,2})?/',
        // –ø–æ–∫–∞ –µ–≤—Ä–æ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π —Å –¥–æ–ª–ª–∞—Ä–æ–º
        "euro"        => '/\D{2}[678](\d$|\d\D{2}|\d([\.\,]\d?)\d$|\d([\.\,]\d*)\D{2})|[678][0-9]([\.\,]\d{0,2})?-[678][0-9]([\.\,]\d{0,2})?/', 
        "hrn"         => '/(\D[-\s\(\)][12]([\.\,]\d{0,2})(\d$|\D\D))|[12]([\.\,]\d{1,2})?\s?-\s?[12]([\.\,]\d{0,2})?/',
        "cashless"    => '/(1[\s]?[–∫\:—Ö\*\/][\s]?1)|(\d+[\.\,])?\d+\s?\%/'
    ];

    public $rate_digit_pattern = '/\d*[\.\,]?\d+/';

    public static function parseAd( $json, $group_id )
    {
        $posts = new DBController;
        $parser = (new self);
        $ads = $json;
        
        foreach( $ads as $ad ){
            $is_id_in_table = $posts->getPostById($ad["id"], "count"); //Ads::where('vk_id', '=', $ad["id"])->count();
            if( $is_id_in_table > 1 ){
                continue;               // –µ—Å–ª–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –µ–≥–æ
            }

            // –≤—ã—Ä–µ–∑–∞–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            $phones_parsed = $parser->parsePhone( $ad["text"], $ad["id"] );
            
            $group = "club" . abs( intval( $group_id ) ); // id –≥—Ä—É–ø–ø—ã vk –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –º–∏–Ω—É—Å–∞
            $owner_and_id = $ad["owner_id"] . "_" . $ad["id"];
            $link = "https://vk.com/" . $group . "?w=wall" . $owner_and_id . "%2Fall";
            
            // —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º –∫—É–ø–ª–∏/–ø—Ä–æ–¥–∞–∂–∏ –∏ –≤–∞–ª—é—Ç—ã
            $type = '';
            foreach( $parser->course_patterns as $key => $pattern ){
                $test_matches = preg_match($pattern, $phones_parsed["text"], $match);
                if( !empty($test_matches) ){
                    if( empty($type) ){
                        $type = $key;
                    } else{
                        $type = $type . ", " . $key;
                    }
                }
            }
            $rate = 0;
            if($type){
                $rate = $parser->parseRate( $phones_parsed["text"], $type );
            }

            $is_text_in_table = Ads::where('content', '=', $ad["text"])->count();

            if( $is_text_in_table > 0 ){
                $args = [
                    'vk_id'           => $ad["id"],
                    'owner_id'        => $ad["owner_id"],
                    'date'            => $ad["date"],
                    'content_changed' => $phones_parsed["text"],
                    'link'            => $link
                ];
                $store = [
                    "type" => "update",
                    "compare" => [ 
                        "key"   => 'content', 
                        "value" => $ad["text"]
                    ]
                ];
                $posts::storePosts( $args, $store );

            } elseif( $ad["from_id"] != $ad["owner_id"] && !empty($ad["text"])){
                $args = [
                    'vk_id'           => $ad["id"],
                    'vk_user'         => $ad["from_id"],
                    'owner_id'        => $ad["owner_id"],
                    'date'            => $ad["date"],
                    'content'         => $ad["text"],
                    'content_changed' => $phones_parsed["text"],
                    'phone'           => $phones_parsed["phones"],
                    'rate'            => $rate,
                    'phone_showed'    => 0,
                    'link_followed'   => 0,
                    'popularity'      => 0,
                    'link'            => $link,
                    'type'            => $type
                ];
                $posts::storePosts( $args );
            } 
            // PostAdsController::postNewAds( $ad["id"] );
        }
        
        return $posts::getPosts(); // –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –ë–î
    }

    // –∏–∑–≤–ª–µ–∫–∞–µ–º –∏–∑ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∫—É—Ä—Å 
    public static function parseRate ( $text, $types ){
        $types_arr = explode(",", $types);
        $rate = 0;
        $parser = (new self);

        foreach($types_arr as $type){         // —Ç–∏–ø—ã –æ–±—ä—è–≤–ª–µ–Ω–∏–π, –Ω–∞–ø—Ä–∏–º–µ—Ä, "sell_dollar, buy_hrn"
            $currency = explode("_" , $type); // –∏–∑–≤–ª–µ–∫–∞–µ–º –≤—Ç–æ—Ä—É—é —á–∞—Å—Ç—å
            $currency = $currency[1];         // –Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–∑ sell_hrn - hrn  

            // –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ —Å—Ç—Ä–æ–∫–µ –º–∞—Å–∫–∞ –∫—É—Ä—Å–∞
            preg_match_all( $parser->rate_patterns[$currency], $text, $matches );

            if( isset($matches[0][0]) ){ // –µ—Å–ª–∏ –µ—Å—Ç—å
                
                // –æ—á–∏—â–∞–µ–º –∫—É—Ä—Å –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤, 
                // –Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–∑ —Å—Ç—Ä–æ–∫–∏ "–æ 72.2 –ú" –∏–∑–≤–ª–µ–∫–∞–µ–º "72.2"
                preg_match_all( $parser->rate_digit_pattern, $matches[0][0], $match );
                $rate_string = str_replace(",", ".", $match[0][0]); // –∑–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—É—é –Ω–∞ —Ç–æ—á–∫—É
                $rate = floatval($rate_string);

                if($currency == "cashless"){ 
                    $last_char = substr($matches[0][0], -1); // –ø–æ –±–µ–∑–Ω–∞–ª—É —Ä—É–±. - –±–∞–∑–∞ 100
                    // var_dump($matches[0][0]);
                    // echo "<br>";
                    if($last_char == 1){
                        $rate = 100;                     // 100 = 1 –∫ 1
                    } else{
                        $rate = 100 + floatval($rate_string);
                    }
                    // var_dump($rate);
                    // echo "<br>";
                }
                break;  // –µ—Å–ª–∏ –≤ –æ–±—ä—è–≤–ª–µ–Ω–∏–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫—É—Ä—Å–æ–≤ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π
            }
        }
        return $rate;
    }

    public static function parsePhone ( $text, $id ){
        $result = $text;
        $pattern = '/(071|072|949|095|050|066|\+38|79)([\d\-\s\)\(]{5,15})\d|(\+7)([\d\-\s\)\(]{8,15})\d/'; // "/[+0-9-]{10,20}/";
        preg_match_all( $pattern, $text, $matches );
        $index = 0;
        foreach($matches[0] as $phone ){
            $result = str_replace( $phone, '&#32;<button class="hidden_phone" title="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–æ–º–µ—Ä" onclick="getPhone([' . $id . ', ' . $index . '])">click</button>&#32;', $result );
            $index++;
        }
        return [ 
            "text"   => $result, 
            "phones" => implode(",", $matches[0])
        ];
    }

    /* –ü–∞—Ä—Å–∏—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –∫—É—Ä—Å –ø–æ—Å—Ç–æ–≤ –≤ –ë–î */
    public static function parseOldAd( $ad ){
        $parser = (new self);
        $posts = new DBController;
        $phones_parsed = $parser->parsePhone( $ad["content"], $ad["vk_id"] );
            
        // —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º –∫—É–ø–ª–∏/–ø—Ä–æ–¥–∞–∂–∏ –∏ –≤–∞–ª—é—Ç—ã
        $type = '';
        foreach( $parser->course_patterns as $key => $pattern ){
            $test_matches = preg_match($pattern, $phones_parsed["text"], $match);
            if( !empty($test_matches) ){
                if( empty($type) ){
                    $type = $key;
                } else{
                    $type = $type . ", " . $key;
                }
            }
        }

        $rate = 0;
        if($type){
            $rate = $parser->parseRate( $phones_parsed["text"], $type );
        }

        $args = [
            'content_changed' => $phones_parsed["text"],
            'phone'           => $phones_parsed["phones"],
            'rate'            => $rate
        ];
        $store = [
            "type" => "update",
            "compare" => [ 
                "key"   => 'vk_id', 
                "value" => $ad["vk_id"]
            ]
        ];
        $posts::storePosts( $args, $store );
    }
}