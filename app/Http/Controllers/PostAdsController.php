<?php
 
namespace App\Http\Controllers;
use Illuminate\Support\Facades\Http;
use Illuminate\Support\Facades\Storage;
use Log;
use App\Http\Controllers\DBController;
 
class PostAdsController extends Controller
{
    public static function postToVk( $ads_id )
    {
        $posts = new DBController;
        
        // $access_token = env('VK_TOKEN_FOR_POST');
        $access_token = Storage::get('/private/ivanov-token.txt');
        $group_id = "-218361718"; // –≥—Ä—É–ø–ø–∞, –≤ –∫–æ—Ç–æ—Ä—É—é –ø–æ—Å—Ç—è—Ç—Å—è –∑–∞–ø–∏—Å–∏
        
        $ad = $posts->getPostById($ads_id); // Ads::where('vk_id', $ads_id)->take(1)->get();
        if( !count($ad) ) return; 

        $ad = $ad[0]; 
        $url = "https://api.vk.com/method/wall.post?access_token=" . $access_token . "&owner_id=" . $group_id . "&v=5.81&from_group=1&message=" . $ad['content'] . "&copyright=" . $ad['link'];
        
        PostAdsController::sendHttp($url);
    }

    /*** 
        –°—Ö–µ–º–∞ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–æ–≤ tg: –æ–¥–∏–Ω —Å–µ—Ä–≤–µ—Ä —Å–ª—É—à–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –≤ —Ä–∞–∑–Ω—ã—Ö –≥—Ä—É–ø–ø–∞—Ö –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç 
        –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –Ω–∞ API –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. –î—Ä—É–≥–æ–π —Å–µ—Ä–≤–µ—Ä –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –∞—Ñ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã 
        –∏ —Ä–µ–ø–æ—Å—Ç–∏—Ç –ø–æ–ª–µ–∑–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è. 
        –¢–∞–∫–∂–µ —É –≤—Ç–æ—Ä–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ –µ—Å—Ç—å –±–æ—Ç, –ø—Ä–æ–≤–æ–¥—è—â–∏–π –º–æ–¥–µ—Ä–∞—Ü–∏—é –ø–æ—Å—Ç–æ–≤ –≤ –∞—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω—ã—Ö –≥—Ä—É–ø–ø–∞—Ö
        –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—é—â–∏–π —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ —Ä–µ–ø–æ—Å—Ç–Ω—É—Ç—å:
        –ø—Ä–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞ –æ–Ω –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ API –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ –ø–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ –ø–æ–ª–µ–∑–Ω–æ—Å—Ç–∏, 
        –ø–æ—Å–ª–µ —á–µ–≥–æ –ª–∏–±–æ —É–¥–∞–ª—è–µ—Ç –ª–∏–±–æ –æ—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ.
    
        –º–µ—Ç–æ–¥ —Ä–µ–ø–æ—Å—Ç–∏—Ç –ª–∏–±–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∞—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≥—Ä—É–ø–ø—É tg
     * @param  ad_object - —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –≤ ParseAdsController->parseAd
     * @return void
     */
    public static function postToTg( $ad_object )
    {
        // –µ—Å–ª–∏ –∏—Å—Ç–æ—á–Ω–∏–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏—è - —Ç–µ–ª–µ–≥—Ä–∞–º, —Ç–æ –ø—ã—Ç–∞–µ–º—Å—è —Å–¥–µ–ª–∞—Ç—å —Ä–µ–ø–æ—Å—Ç
        if("tg" === $ad_object["domain"]){
            $url = env("TG_LISTENER_DOMAIN") . "/api/messages.forwardMessages/?data[from_peer]=".$ad_object["channel"]."&data[to_peer]=@". env("TG_CHANNEL_DOMAIN") . $ad_object["locale"] . "&data[id][0]=" . $ad_object["vk_id"];
            // –ø—Ä–æ–≤–æ–¥–∏–º –ø—Ä–æ–≤–µ—Ä–∫—É, —á—Ç–æ–±—ã –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ –Ω–µ –±—ã–ª–æ –æ—Ç —Ç–æ–≥–æ –∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            // —á—Ç–æ –∏ –Ω—ã–Ω–µ—à–Ω–µ–µ: —á–∞—Å—Ç–æ –ª—é–¥–∏ –ø–æ—Å—Ç—è—Ç —Å–≤–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≥—Ä—É–ø–ø,
            // –∏–∑-–∑–∞ —á–µ–≥–æ –≤ –∞—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø–µ –ø–æ—è–≤–ª—è–µ—Ç—Å—è –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–¥—Ä—è–¥
            $last_ad_from_current_user = false;
            $last_ad = PostAdsController::getLastTgAd($ad_object);
            if(isset($last_ad->response->messages[0]->fwd_from->from_id->user_id) ){
                $last_ad_usr_id = $last_ad->response->messages[0]->fwd_from->from_id->user_id;
                if($last_ad_usr_id == $ad_object["vk_user"]){
                    $last_ad_from_current_user = true;
                }
            }
            if(!$last_ad_from_current_user){
                // –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ —Ä–µ–ø–æ—Å—Ç
                $repost_response = PostAdsController::sendHttp($url);
                
                if(!empty($repost_response)){
                    $repost_json = json_decode($repost_response->body());
                    // –±—ã–≤–∞–µ—Ç, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–ª—å–∑—è –ø–µ—Ä–µ—Å–ª–∞—Ç—å –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –∏–ª–∏
                    // –∑–∞–ø—Ä–µ—Ç–∞ –Ω–∞ —Ä–µ–ø–æ—Å—Ç –≤ –ø–æ–ª–∏—Ç–∏–∫–µ –≥—Ä—É–ø–ø—ã.
                    // –í —Ç–∞–∫–æ–º —Å–ª—É—á–∞–µ –ø—Ä–æ—Å—Ç–æ –∫–æ–ø–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
                    // —Å–æ —Å—Å—ã–ª–∫–æ–π –Ω–∞ —Å–∞–π—Ç —ç—Ç–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
                    if(empty($repost_json) || empty($repost_json->success)){
                        $repost_response = PostAdsController::sendToTg($ad_object);
                        
                    }
                }
            }
        }
    }
    
    public static function repostToTg( $ad_object )
    {
        $url = env("TG_LISTENER_DOMAIN") . "/api/messages.forwardMessages/?data[from_peer]=@".$ad_object["channel"]."&data[to_peer]=@". env("TG_CHANNEL_DOMAIN") . $ad_object["locale"] . "&data[id][0]=" . $ad_object["vk_id"];
    }

    public static function getLastTgAd( $ad_object )
    {
        $url = env("TG_LISTENER_DOMAIN") ."/api/messages.getHistory/?data[peer]=@" . env("TG_CHANNEL_DOMAIN") . $ad_object["locale"] . "&data[limit]=1";
        $json = PostAdsController::getJson($ad_object);
        if(!empty($json) && !empty($json->success)){
            return $json;
        } 
    }

    // —É–¥–∞–ª–µ–Ω–∏–µ —Å–ø–∞–º–∞ + –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É–¥–∞–ª–µ–Ω–∏–∏
    public static function modetateTg( $remove_ad_object )
    {
        PostAdsController::deleteInTg($remove_ad_object);
        $remove_ad_object["moderation"] = "1";
        PostAdsController::sendToTg($remove_ad_object);
    }

    // —É–¥–∞–ª—è–µ—Ç –±–µ—Å–ø–æ–ª–µ–∑–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∏–∑ –∞—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø
    public static function deleteInTg( $remove_ad_object )
    {
        // var_dump($remove_ad_object);
        if(isset($remove_ad_object["id"]) && !empty($remove_ad_object["id"]) ){
            $url = env("TG_BOT_DOMAIN") . "/api/channels.deleteMessages/?data[channel]=@" . env("TG_CHANNEL_DOMAIN") . $remove_ad_object["locale"] . "&data[id][0]=" . $remove_ad_object["id"];
            
            PostAdsController::sendHttp($url);
        }
    }

    // –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, —á—Ç–æ–±—ã —Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∞—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã:
    // –µ—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è —Å–¥–µ–ª–∞—Ç—å —Ä–µ–ø–æ—Å—Ç –ª–∏–±–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤–∑—è—Ç–æ –Ω–µ –∏–∑ tg,
    // –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è. –ï—Å–ª–∏ —É–¥–∞–ª–µ–Ω —Å–ø–∞–º, —Ç–æ –≤ –≥—Ä—É–ø–ø—É
    // –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏
    public static function sendToTg( $ad_object )
    {
        // var_dump($ad_object);
        // —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ-–º–æ–¥–µ—Ä–∞—Ü–∏—è –æ —Ç–æ–º, —á—Ç–æ —Å–ø–∞–º —É–¥–∞–ª–µ–Ω
        if(isset( $ad_object["moderation"]) ){

            $username = "";
            if(isset($ad_object["from_id"]->user_id)){
                $username = "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @" . PostAdsController::getTgUserInfo($ad_object["from_id"]->user_id) . " ";
            } 
            var_dump("-----------------", $ad_object["from_id"]->user_id);
            var_dump($username);
            $ad_content = "–°–æ–æ–±—â–µ–Ω–∏–µ " . $username . "–Ω–µ –ø—Ä–æ—à–ª–æ –º–æ–¥–µ—Ä–∞—Ü–∏—é –∏ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø–µ";
        } else{
            $subdomain = $ad_object["locale"] == "donetsk" ? "" : $ad_object["locale"] . ".";
            $link_to_site = "https://" . $subdomain . "kursivalut.ru/?wall=" . $ad_object["owner_id"] . "_" . $ad_object["vk_id"];
            $ad_content = $ad_object["content"] . "\n‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è–û–±—ä—è–≤–ª–µ–Ω–∏–µ –≤–∑—è—Ç–æ —Å —Å–∞–π—Ç–∞  üëâ " . $link_to_site;
        }

        $text = str_replace(" ", "%20", $ad_content);
        $to_peer = env("TG_CHANNEL_DOMAIN") . $ad_object["locale"];
        $url = env("TG_BOT_DOMAIN") . "/api/messages.sendMessage/?data[peer]=@". $to_peer . "&data[message]=" . $text;
        
        PostAdsController::sendHttp($url);
    }

    // –ü–æ–ª—É—á–∞–µ—Ç –Ω–∏–∫–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ id
    public static function getTgUserInfo( $id )
    {
        $userinfo = '';
        $url = env("TG_LISTENER_DOMAIN") . "/api/getInfo/?id=" . $id;
        $response = PostAdsController::sendHttp($url);
        
        if(!empty($response)){
            $json = json_decode($response->body());
            if(isset($json->success) && !empty($json->success)){
                if(isset($json->response->User->username)){
                    $userinfo = $json->response->User->username;
                }
                // if(isset($json->response->User->first_name)){
                //     $userinfo .= " " . $json->response->User->first_name;
                // }
            }
            
        };
        return $userinfo;
    }

    // –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
    public static function sendNoteInTg( $ad_object )
    {
        if(isset($ad_object["vk_id"]) && !empty($ad_object["vk_id"]) 
        // && isset($post["from_id"]->user_id) && !empty($post["from_id"]->user_id) && isset($post["message"]) 
        ){
            $text = "–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ @". env("TG_CHANNEL_DOMAIN") . $ad_object["locale"]." –Ω–µ –ø—Ä–æ—à–ª–æ –º–æ–¥–µ—Ä–∞—Ü–∏—é –∏ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø–µ. –¢–µ–∫—Å—Ç –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:\n¬´" .$ad_object["content"] . "¬ª";
            $custom_ad_object = $ad_object;
            $custom_ad_object["content"] = $text;
            $custom_ad_object["moderation"] = "1";
            // $url = env("TG_LISTENER_DOMAIN") . "/api/messages.sendMessage/?data[peer]=" . $post["from_id"]->user_id . "&data[message]=" . $text_replaced;
            PostAdsController::sendToTg($custom_ad_object);
            
        }
    }

    // –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ get-–∑–∞–ø—Ä–æ—Å–æ–≤
    public static function sendHttp($url)
    {
        try {
            $response = Http::get($url);
        } catch(\Exception $exception) {
            Log::error($exception);
        }
        if(!empty($response)) return $response;
    }

    // –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ tg-API
    public static function getJson($ad_object)
    {
        $url = env("TG_LISTENER_DOMAIN") . "/api/messages.getHistory/?data[peer]=@". env("TG_CHANNEL_DOMAIN") . $ad_object["locale"] ."&data[limit]=1";
        $response = PostAdsController::sendHttp($url);
        
        return empty($response) ? null : json_decode($response->body());
    }
}